import streamlit as st
import sys
import cv2
import numpy as np
from PIL import Image
import Chapter3 as c3
import Chapter4 as c4
import Chapter05 as c5
import Chapter9 as c9

page_bg_img = """
<style> 
[data-testid="stAppViewContainer"]{
background-image: url(https://img.freepik.com/free-vector/realistic-black-shimmer-background_23-2150083458.jpg?w=996&t=st=1684378196~exp=1684378796~hmac=b146a27d331dd8d6e6d56ffe49d08c11bb49b6f3d6f1dff7ec5c2ca48819cf70);
background-size: cover;}
[data-testid = "stHeader"]{
background-color: rgba(0,0,0,0);
}
</style>
"""

st.set_page_config(
    page_title="Thu·∫≠t to√°n x·ª≠ l√Ω ·∫£nh üé®",
    page_icon="üèï",
)
st.markdown("<h2 style = 'text-align: center; font-size: 40px; font-family: comic sans ms, cursive; color: #008080;'>Thu·∫≠t to√°n x·ª≠ l√Ω ·∫£nh üé® </h2>", unsafe_allow_html=True)
st.sidebar.header(" M·ª•c x·ª≠ l√Ω ·∫£nh üèï ")
st.markdown(page_bg_img, unsafe_allow_html=True)

def imgin_header():
    imgin_Title = '<p style="font-family: Courier; color: #2e8b57; font-size: 24px;"><b>·∫¢nh ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh</b></p>'
    st.markdown(imgin_Title, unsafe_allow_html=True)
def imgout_header():
    imgout_Title = '<p style="font-family: Courier; color: #191970; font-size: 24px;"><b>·∫¢nh sau khi ƒë∆∞·ª£c x·ª≠ l√Ω ·∫£nh ‚úÖ</b></p>'
    st.markdown(imgout_Title, unsafe_allow_html=True)
def download_info():
    download_notice = '<p style="font-family: monospace; font-size: 18px; color: #006400;"><i>Nh·∫•p chu·ªôt ph·∫£i v√†o ·∫£nh ƒë·ªÉ t·∫£i xu·ªëng.</i></p>'
    st.markdown(download_notice, unsafe_allow_html=True) 
    

option = st.sidebar.selectbox('CH·ªåN CH∆Ø∆†NG X·ª¨ L√ù ·∫¢NH üìã ', ['--Ch·ªçn ch∆∞∆°ng--', 'Ch∆∞∆°ng 3 üåª', 'Ch∆∞∆°ng 4 üåª','Ch∆∞∆°ng 5 üåª', 'Ch∆∞∆°ng 9 üåª'])
if option == 'Ch∆∞∆°ng 3 üåª':
    img_upload = st.file_uploader('üóÇ Ch·ªçn file ·∫£nh', type=['jpg', 'tif', 'bmp', 'gif', 'png'])
    if img_upload is not None:
            global imgin
            #ƒë·ªãa ch·ªâ file ·∫£nh trong desktop G:\ProjectCuoiKy\ProjectCuoiKy\ProcessingImage\Chuong3\\
            filepath = r'C:\machine_vision\ProcessingImage\Chuong3\\' + img_upload.name
            imgin = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
            imgin_header()
            st.image(imgin)

            c3_function = st.sidebar.selectbox('H√£y ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh', [
                '--ch·ªçn ph∆∞∆°ng ph√°p--','Negative', 'Logarit', 'Power', 'PieceWiseLinear', 'Histogram',
                'HistogramEqualization', 'LocalHistogram', 'HistogramStatistics',
                'SmoothingGauss', 'Smoothing', 'MedianFilter', 'Sharpen', 'UnSharpMasking', 'Gradient'])
            # Negative(h√†m l√†m ·∫•m ·∫£nh, Tr·∫Øng th√†nh ƒëen, ƒëen th√†nh tr·∫Øng)
            if c3_function == 'Negative':
                global imgout
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.Negative(imgin,imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Negative: H√†m l√†m ·∫•m ·∫£nh, Tr·∫Øng th√†nh ƒëen, ƒëen th√†nh tr·∫Øng</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # Logarit (H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p logarit. k·∫øt qu·∫£ h√†m logarit: s√°ng √≠t th√†nh s√°ng nhi·ªÅu, ƒëen nhi·ªÅu th√†nh ƒëen √≠t)
            elif c3_function == 'Logarit':
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.Logarit(imgin,imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Logarit:H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p logarit. K·∫øt qu·∫£ h√†m logarit:S√°ng √≠t th√†nh s√°ng nhi·ªÅu, ƒëen nhi·ªÅu th√†nh ƒëen √≠t.</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # Power(H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p l≈©y th·ª´a ·∫£nh. k·∫øt qu·∫£ h√†m Power: l√†m ·∫£nh tr·ªü n√™n t·ªëi h∆°n, ho·∫∑c t·ªëi h∆°n)

            elif c3_function == 'Power':
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.Power(imgin,imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Power: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p l≈©y th·ª´a ·∫£nh. k·∫øt qu·∫£ h√†m Power: l√†m ·∫£nh tr·ªü n√™n t·ªëi h∆°n, ho·∫∑c t·ªëi h∆°n</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # PieceWiseLinear(H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p PieceWise. k·∫øt qu·∫£ h√†m PieceWiseLinear: K√©o d√†i ƒë·ªô t∆∞∆°ng ph·∫£n, ph·∫°m vi m·ª©c ƒë·ªô c∆∞·ªùng ƒë·ªô l√†m s√°ng h∆°n)
            elif c3_function == 'PieceWiseLinear':
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.PiecewiseLinear(imgin,imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>PieceWiseLinear: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p PieceWise. k·∫øt qu·∫£ h√†m PieceWiseLinear: K√©o d√†i ƒë·ªô t∆∞∆°ng ph·∫£n, ph·∫°m vi m·ª©c ƒë·ªô c∆∞·ªùng ƒë·ªô l√†m s√°ng h∆°n</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # Histogram(t·∫°o ra bi·ªÉu ƒë·ªì, hi·ªÉn th·ªã t·∫ßn su·∫•t theo dnajg c·ªôt theo d·ªØ li·ªáu t∆∞∆°ng ·ª©ng)
            elif c3_function == 'Histogram':
                imgout = np.zeros((imgin.shape[0], 256, 3), np.uint8) + 255
                c3.Histogram(imgin,imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Histogram: T·∫°o ra bi·ªÉu ƒë·ªì, hi·ªÉn th·ªã t·∫ßn su·∫•t theo d·∫°ng c·ªôt theo d·ªØ li·ªáu t∆∞∆°ng ·ª©ng</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # HistogramEqualization(l√†m cho ·∫£nh ƒë·∫πp h∆°n)            
            elif c3_function == 'HistogramEqualization':
                imgout = np.zeros(imgin.shape, np.uint8)
                cv2.equalizeHist(imgin, imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>HistogramEqualization: L√†m cho ·∫£nh ƒë·∫πp h∆°n</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # LocalHistogram(l√†m r√µ 1 v√πng ·∫£nh)
            elif c3_function == 'LocalHistogram':
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.LocalHistogram(imgin, imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #0064000000; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>LocalHistogram: L√†m r√µ 1 v√πng ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # HistogramStatistics(r√µ n√©t 1 s·ªë v√πng trong ·∫£nh)
            elif c3_function == 'HistogramStatistics':
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.HistogramStatistics(imgin, imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>HistogramStatistics: R√µ n√©t 1 s·ªë v√πng trong ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # SmoothingGauss(l√†m nh√≤e ·∫£nh l√†m tr∆°n ·∫£nh t∆∞∆°ng t·ª± nh∆∞ smooothing nh∆∞ng nh√≤e h∆°n)
            elif c3_function == 'SmoothingGauss':
                imgout = c3.SmoothingGauss(imgin)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>SmoothingGauss: L√†m nh√≤e ·∫£nh l√†m tr∆°n ·∫£nh t∆∞∆°ng t·ª± nh∆∞ smooothing nh∆∞ng nh√≤e h∆°n</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # Smoothing(l√†m nh√≤e ·∫£nh)
            elif c3_function == 'Smoothing':
                imgout = c3.Smoothing(imgin)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Smoothing:L√†m nh√≤e ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # MedianFilter(l·ªçc nhi·ªÖu ·∫£nh)
            elif c3_function == 'MedianFilter':
                imgout = np.zeros(imgin.shape, np.uint8)
                c3.MedianFilter(imgin, imgout)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>MedianFilter: L·ªçc nhi·ªÖu ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # Sharpen(l√†m n√©t ·∫£nh, l√†m nh·ªçn c√°c g√≥c ·∫£nh)
            elif c3_function == 'Sharpen':
                imgout = c3.Sharpen(imgin)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Sharpen: L√†m n√©t ·∫£nh, l√†m nh·ªçn c√°c g√≥c ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # UnSharpMasking(l√†m n√©t ·∫£nh)
            elif c3_function == 'UnSharpMasking':
                imgout = c3.UnSharpMasking(imgin)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>UnSharpMasking: L√†m n√©t ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            # Gradient(t√°ch bi√™n ·∫£nh)
            elif c3_function == 'Gradient':
                imgout = c3.Gradient(imgin)
                imgout_header()
                st.image(imgout)
                download_info()
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Gradient: T√°ch bi√™n ·∫£nh</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)
            else:
                st.image('doi.gif', caption='Waiting...')
                state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
                st.sidebar.markdown(state, unsafe_allow_html=True)
                quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>None</i></p>'
                st.sidebar.markdown(quote, unsafe_allow_html=True)

elif option == 'Ch∆∞∆°ng 4 üåª':
    img_upload = st.file_uploader('üóÇ Ch·ªçn file ·∫£nh', type=['jpg', 'tif', 'bmp', 'gif', 'png'])
    if img_upload is not None:
        filepath = r'C:\machine_vision\ProcessingImage\Chuong4\\' + img_upload.name #ƒë·ªãa ch·ªâ file ·∫£nh trong desktop G:\ProjectCuoiKy\ProjectCuoiKy\ProcessingImage\Chuong4\\
        imgin = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
        imgin_header()
        st.image(imgin)

        c4_function = st.sidebar.selectbox('H√£y ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh', [
            '--ch·ªçn ph∆∞∆°ng ph√°p--','Spectrum', 'FrequencyFilter', 'DrawFilter', 'RemoveNoise'])
        # Spectrum(x·ª≠ l√Ω quang ph·ªï b·∫±ng c√°c c√¥ng th·ª©c t·∫ßn s·ªë s√≥ng ƒëi·ªán t·ª´, √°nh s√°ng, ƒëi·ªÉm ·∫£nh)
        if c4_function == 'Spectrum':
            imgout = c4.Spectrum(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Spectrum: X·ª≠ l√Ω quang ph·ªï b·∫±ng c√°c c√¥ng th·ª©c t·∫ßn s·ªë s√≥ng ƒëi·ªán t·ª´, √°nh s√°ng, ƒëi·ªÉm ·∫£nh</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # FrequencyFilter(b·ªô l·ªçc cho t√≠n hi·ªáu c√≥ t·∫ßn s·ªë th·∫•p t·∫ßn s·ªë c·∫Øt ƒë√£ ch·ªçn, l√†m suy gi·∫£m t·∫ßn s·ªë )
        elif c4_function == 'FrequencyFilter':
            imgout = c4.FrequencyFilter(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>FrequencyFilter:B·ªô l·ªçc cho t√≠n hi·ªáu c√≥ t·∫ßn s·ªë th·∫•p t·∫ßn s·ªë c·∫Øt ƒë√£ ch·ªçn, l√†m suy gi·∫£m t·∫ßn s·ªë</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # DrawFilter(l·ªçc ·∫£nh c∆° b·∫£n)
        elif c4_function == 'DrawFilter':
            imgout = c4.DrawFilter(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>DrawFilter: L·ªçc ·∫£nh c∆° b·∫£n</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # RemoveMoire(x√≥a ƒëi·ªÉm nhi·ªÖu ƒëi)
        elif c4_function == 'RemoveNoise':
            imgout = c4.RemoveNoise(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>RemoveNoise: X√≥a ƒëi·ªÉm nhi·ªÖu ƒëi </i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        else:
            st.image('doi.gif', caption='Waiting...')
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>None</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)

elif option == 'Ch∆∞∆°ng 5 üåª':
    img_upload = st.file_uploader('üóÇ Ch·ªçn file ·∫£nh', type=['jpg', 'tif', 'bmp', 'gif', 'png'])
    if img_upload is not None:
        filepath = r'C:\machine_vision\ProcessingImage\Chuong5\\' + img_upload.name  #ƒë·ªãa ch·ªâ file ·∫£nh trong desktop G:\ProjectCuoiKy\ProjectCuoiKy\ProcessingImage\Chuong5\\
        imgin = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
        imgin_header()
        st.image(imgin)

        c5_function = st.sidebar.selectbox('H√£y ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh', [
            '--ch·ªçn ph∆∞∆°ng ph√°p--', 'CreateMotionNoise', 'DenoiseMotion'])
    
        # CreateMotionNoise (t·∫°o chuy·ªÉn ƒë·ªông nhi·ªÖu)
        if c5_function == 'CreateMotionNoise':
            imgout = c5.CreateMotionNoise(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>CreateMotionNoise: T·∫°o chuy·ªÉn ƒë·ªông nhi·ªÖu</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # DenoiseMotion  (kh·ª≠ nhi·ªÖu, x√≥a c√°c chuy·ªÉn ƒë·ªông nhi·ªÖu)
        elif c5_function == 'DenoiseMotion':
            imgout = c5.DenoiseMotion(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>DenoiseMotion: Kh·ª≠ nhi·ªÖu, x√≥a c√°c chuy·ªÉn ƒë·ªông nhi·ªÖu</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        else:
            st.image('doi.gif', caption='Wating...')
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>None</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)


elif option == 'Ch∆∞∆°ng 9 üåª':
    img_upload = st.file_uploader('üóÇ Ch·ªçn file ·∫£nh', type=['jpg', 'tif', 'bmp', 'gif', 'png'])
    if img_upload is not None:
        filepath = r'C:\machine_vision\ProcessingImage\Chuong9\\' + img_upload.name #ƒë·ªãa ch·ªâ file ·∫£nh trong desktop G:\ProjectCuoiKy\ProjectCuoiKy\ProcessingImage\Chuong9\\
        imgin = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
        imgin_header()
        st.image(imgin)

        c9_function = st.sidebar.selectbox('H√£y ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh', [
            '--ch·ªçn ph∆∞∆°ng ph√°p--','Erosion', 'Dilation', 'OpeningClosing', 'Boundary', 'HoleFill', 
            'MyConnectedComponent', 'CountRice'])
        # Erosion( l√†m b√†o m√≤n ·∫£nh)
        if c9_function == 'Erosion':
            imgout = np.zeros(imgin.shape, np.uint8)
            c9.Erosion(imgin, imgout)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Erosion: L√†m b√†o m√≤n ·∫£nh</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # Dilation (l√†m gi·∫£n n·ªü ch·ªØ c√°i , l√†m m·∫≠p ch·ªØ)
        elif c9_function == 'Dilation':
            imgout = np.zeros(imgin.shape, np.uint8)
            c9.Dilation(imgin, imgout)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Dilation: L√†m gi·∫£n n·ªü ch·ªØ c√°i , l√†m m·∫≠p ch·ªØ</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # OpeningClosing(x√≥a nhi·ªÖu ·∫£nh)
        elif c9_function == 'OpeningClosing':
            imgout = np.zeros(imgin.shape, np.uint8)
            c9.OpeningClosing(imgin, imgout)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>OpeningClosing: Kh·ª≠ nhi·ªÖu ·∫£nh</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # Boundary(ph√°t hi·ªÉn c√°c ƒëi·ªÉm bi√™n v√† khoanh v√πng c√°c ƒëi·ªÉm bi√™n)
        elif c9_function == 'Boundary':
            imgout = c9.Boundary(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>Boundary: Ph√°t hi·ªán c√°c ƒëi·ªÉm bi√™n v√† khoanh v√πng c√°c ƒëi·ªÉm bi√™n</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # HoleFill(l·∫•p 1 l·ªó trong ·∫£nh)
        elif c9_function == 'HoleFill':
            imgout = c9.HoleFill(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>HoleFill: L·∫•p 1 l·ªó trong ·∫£nh</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        # MyConnectedComponent( l·ªçc ra li√™n th√¥ng v√† ƒë·∫øm c√≥ bao nhi√™u mi·∫øng x∆∞∆°ng g√†)
        elif c9_function == 'MyConnectedComponent':
            imgout = c9.MyConnectedComponent(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>MyConnectedComponent: L·ªçc ra li√™n th√¥ng v√† ƒë·∫øm c√≥ bao nhi√™u mi·∫øng x∆∞∆°ng g√†</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)

        # CountRice( ƒë·∫øm c√≥ bao nhi√™u h·∫°t g·∫°o)
        elif c9_function == 'CountRice':
            imgout = c9.CountRice(imgin)
            imgout_header()
            st.image(imgout)
            download_info()
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>CountRice: ƒê·∫øm c√≥ bao nhi√™u h·∫°t g·∫°o</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
        else:
            st.image('doi.gif', caption='Wait for processing...')
            state = '<p style="font-family: didot, serif; color: #006400; font-size: 18px; texxt-align: left;">Ph∆∞∆°ng ph√°p ƒë√£ ch·ªçn ƒë·ªÉ x·ª≠ l√Ω ·∫£nh:</p>'
            st.sidebar.markdown(state, unsafe_allow_html=True)
            quote = '<p style="font-family: cursive; color: #ff4500; font-size: 16px; texxt-align: left;"><i>None</i></p>'
            st.sidebar.markdown(quote, unsafe_allow_html=True)
else:
    st.image('load1.gif', use_column_width=True)



        